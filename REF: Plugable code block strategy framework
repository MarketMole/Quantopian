
import math 
import talib
import numpy
import pandas 
import zipline

EntryTrigger    = 22
EnableLogging   = True
KeltnerPeriods  = 11
ChopPeriods     = 21
MFIPeriods      = 11
ROCPeriods      = 11
MACDPeriodsSlow = 63;   MACDPeriodsFast = 21;   MACDPeriodsSignal= 11
HighHighPeriods = 2
HMAPeriods      = 63
RSIPeriods      = 21
LongMAPeriods   = 84
VariancePeriods = 11;   VarianceCutoff  = .5
ExitPeriods     = 21
TrailingStopPct = 10.0
VolBiasPeriods  = 21;  VolBiasThreshold = .70
MaxSecuritiesToTrade = 20

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def initialize(context):
    set_symbol_lookup_date('2015-01-01')
    context.REF = symbol('IWM')
    set_benchmark(context.REF)    
    context.S = {}
    
    # Establish state
    schedule_function(EstablishState)
    
    # Calculate indicators
    schedule_function(CalculateKeltnerChannels)
    schedule_function(CalculateChoppiness)
    schedule_function(CalculateMFI)
    schedule_function(HighestHigh)
    schedule_function(CalculateOBV)
    schedule_function(CalculateROC)
    schedule_function(CalculateMACD)
    schedule_function(CalculateLongMA)
    schedule_function(CalculateRSI)
    schedule_function(CalculateHMA)
    schedule_function(CalculateVolatilityVariance)
    
    # Handle exits
    schedule_function(PeriodStop)
    schedule_function(TrailingStop)
    schedule_function(VolBiasProfitStop)
    #schedule_function(VolatilityStop)
    
    # Handle entries
    schedule_function(HandleEntry)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def handle_data(context, data):
    record(Leveage = context.account.leverage)
    #if (context.REF in context.S and 'MACD' in context.S[context.REF]):
    #    record(MACD    = context.S[context.REF].MACD)
    #    record(Trigger = context.S[context.REF].Trigger)
    #    record(OBV     = context.S[context.REF].OBV)
    #    record(MFI     = context.S[context.REF].MFI)
    if (context.REF in context.S and 'CHOP' in context.S[context.REF]):
        record(CHOP     = context.S[context.REF].CHOP)
        record(KeltHigh = context.S[context.REF].KeltnerHigh)
        record(KeltLow  = context.S[context.REF].KeltnerLow)
        record(Close    = context.S[context.REF].Close)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def HandleEntry(context, data):
    eligible = []
    positions = context.portfolio.positions
    openPositions = [stock for stock in positions if positions[stock].amount != 0]

    for stock in context.S:
        if ((context.S[stock].Trigger >= EntryTrigger) 
            and stock not in openPositions):
            eligible.append(stock)
            
    eligible += openPositions
    eligibleCount = float(len(eligible))
    for stock in eligible:
        if (get_open_orders(stock)):
            continue
        order_target_percent(stock, 1.0 / eligibleCount)
        PrintEntry(context.S[stock], "ThresholdEntry", stock.symbol)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateKeltnerChannels(context, data):
    highDeck  = history(KeltnerPeriods + 1, '1d', 'high').dropna(axis=1)
    lowDeck   = history(KeltnerPeriods + 1, '1d', 'low').dropna(axis=1)    
    closeDeck = history(KeltnerPeriods + 1, '1d', 'close_price').dropna(axis=1)    
    valid     = [sid for sid in highDeck if sid in data]
    highDeck  = highDeck[valid]
    lowDeck   = lowDeck[valid]
    closeDeck = closeDeck[valid]
    sma       = closeDeck.apply(talib.MA, timeperiod = KeltnerPeriods, matype = MAType.SMA).dropna()
    for stock in context.S:
        try:
            atr = talib.ATR(highDeck[stock], lowDeck[stock], closeDeck[stock], timeperiod=KeltnerPeriods)
        except: continue
        context.S[stock].KeltnerLow  = sma[stock][-1] - atr[-1]
        context.S[stock].KeltnerHigh = sma[stock][-1] + atr[-1]
        context.S[stock].Trigger += 2 if context.S[stock].Close > context.S[stock].KeltnerHigh else 0
        context.S[stock].Trigger += -1 if context.S[stock].Close < context.S[stock].KeltnerLow else 0        
        
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateChoppiness(context, data): #Courtesy of Peter Bakker
    # 100 * LOG10( SUM(ATR(1), x) / ( MaxHi(x) - MinLo(x) ) ) / LOG10(x)
    highDeck  = history(ChopPeriods * 2, '1d', 'high').dropna(axis=1)
    lowDeck   = history(ChopPeriods * 2, '1d', 'low').dropna(axis=1)    
    closeDeck = history(ChopPeriods * 2, '1d', 'close_price').dropna(axis=1)    
    valid     = [sid for sid in highDeck if sid in data]
    highDeck  = highDeck[valid]
    lowDeck   = lowDeck[valid]
    closeDeck = closeDeck[valid]
    # ATR returns an array, you want the last value  
    # lastATR = ATR[-1]  
    for stock in context.S:
        try:
            ATR = talib.ATR(highDeck[stock], lowDeck[stock], closeDeck[stock], timeperiod=ChopPeriods)
        except: continue
        total = sum(ATR[-ChopPeriods:])  
        lowest = min(lowDeck[stock][-ChopPeriods:])  
        highest = max(highDeck[stock][-ChopPeriods:])  
        diff = highest - lowest  
        temp = (total/diff)  
        chop = 100 * math.log10(temp) / math.log10(ChopPeriods)  
        context.S[stock].CHOP = chop        
        context.S[stock].Trigger += 1 if chop > 60 else 0
        
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateMFI(context, data):
    highDeck = history(300, '1d', 'high').dropna(axis=1)
    lowsDeck = history(300, '1d', 'low').dropna(axis=1)
    closDeck = history(300, '1d', 'close_price').dropna(axis=1)
    voluDeck = history(300, '1d', 'volume').dropna(axis=1)
    for stock in context.S:
        try:
            mfi = talib.MFI(highDeck[stock], lowsDeck[stock], closDeck[stock], voluDeck[stock], timeperiod=MFIPeriods)
            context.S[stock].MFI = mfi[-1]
            context.S[stock].Trigger += 5 if mfi[-1] > 70 else -1
        except:
            pass
    
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateOBV(context, data):
    closeDeck  = history(200, "1d", "close_price").dropna(axis=1)
    closeDeck  = closeDeck[[sid for sid in closeDeck if sid in data]]
    volumeDeck = history(200, "1d", "volume").dropna(axis=1)
    volumeDeck = volumeDeck[[sid for sid in volumeDeck if sid in data]]
    for stock in closeDeck:
        context.S[stock].OBV = talib.OBV(closeDeck[stock], volumeDeck[stock])[-1]
        context.S[stock].Trigger += 2 if context.S[stock].OBV < 0.0 else 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateROC(context, data):
    closeDeck = history(ROCPeriods, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[[sid for sid in closeDeck if sid in data]]
    for stock in closeDeck:
        context.S[stock].ROC = (closeDeck[stock][-1] - closeDeck[stock][0]) / closeDeck[stock][0] * 100.0
        context.S[stock].Trigger += 3 if context.S[stock].ROC > 60.0 else 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateMACD(context, data):
    closeDeck = history(MACDPeriodsSlow + MACDPeriodsFast, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[[sid for sid in closeDeck if sid in data]]
    for stock in closeDeck:
        macd, signal, hist = talib.MACD(closeDeck[stock], MACDPeriodsFast, MACDPeriodsSlow, MACDPeriodsSignal)        
        context.S[stock].MACD   = hist[-1]
        context.S[stock].Trigger += 1 if hist[-1] > 0.0 else 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~            
def HighestHigh(context, data):
    highDeck = history(HighHighPeriods, "1d", "high").dropna(axis=1)
    highDeck = highDeck[[sid for sid in highDeck if sid in data]]
    for stock in highDeck:
        context.S[stock].Trigger += 2 if context.S[stock].High == max(highDeck[stock]) else 0
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateLongMA(context, data):
    closeDeck = history(LongMAPeriods, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[[sid for sid in closeDeck if sid in data]]
    sma       = closeDeck.apply(talib.MA, timeperiod = LongMAPeriods, matype = MAType.SMA).dropna()
    for stock in sma:
        context.S[stock].Trigger += 5 if context.S[stock].Close > sma[stock][-1] else 0
        context.S[stock].SMA = sma[stock][-1]
    
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    
def CalculateRSI(context, data):
    closeDeck = history(RSIPeriods + 2, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[[sid for sid in closeDeck if sid in data]]
    rsi       = closeDeck.apply(talib.RSI, timeperiod = RSIPeriods).dropna()
    for stock in rsi:
        context.S[stock].Trigger += 2 if rsi[stock][-1] > rsi[stock][-2] else 0
        context.S[stock].Trigger += 3 if rsi[stock][-1] < 30 else 0
        context.S[stock].RSI = rsi[stock][-1]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateHMA(context, data):
    closeDeck = history(HMAPeriods * 2, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[[sid for sid in closeDeck if sid in data]]
    wmaA      = closeDeck.apply(talib.MA,   timeperiod = HMAPeriods / 2, matype = MAType.WMA).dropna() * 2.0
    wmaB      = closeDeck.apply(talib.MA,   timeperiod = HMAPeriods, matype = MAType.WMA).dropna()
    wmaDiffs  = wmaA - wmaB
    hma       = wmaDiffs.apply(talib.MA, timeperiod = math.sqrt(HMAPeriods), matype = MAType.WMA)
    for stock in closeDeck:
        context.S[stock].Trigger += 1 if hma[stock][-1] > hma[stock][-2] else 0
        context.S[stock].HMA = hma[stock][-1]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def CalculateVolatilityVariance(context, data):
    closeDeck      = history(VariancePeriods, '1d', 'close_price').dropna(axis=1)
    closeDeck      = closeDeck[[sid for sid in closeDeck if sid in data]]
    returnsDeck    = closeDeck.pct_change()
    returnsLog     = numpy.log1p(returnsDeck)
    returnsLogMean = pandas.rolling_mean(returnsLog, 3)
    sqrdLogDiffs   = (returnsLog - returnsLogMean)**2.0
    sqrdLogDiffs  *= 1000.0
    sqrdLogDiffs   = pandas.rolling_mean(sqrdLogDiffs, 7)
    for stock in closeDeck:
        if (not sqrdLogDiffs[stock].any() or len(sqrdLogDiffs[stock]) == 0):
            continue
        context.S[stock].Trigger += 3 if sqrdLogDiffs[stock][-1] < VarianceCutoff else 0           
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def PeriodStop(context, data):
    for stock in data:
        if (not context.S[stock].NetQuantity or context.S[stock].HasOpenOrders):
            continue
        if ('PeriodStop' not in context.S[stock]):
            context.S[stock].PeriodStop = ExitPeriods
            continue
        context.S[stock].PeriodStop -= 1
        if (context.S[stock].PeriodStop > 0):
            continue
        del context.S[stock].PeriodStop
        if (context.S[stock].NetQuantity != 0):
            order_target_percent(stock, 0.0)  
            PrintExit(context.S[stock], "PeriodStop", stock.symbol)
            
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                
def VolBiasProfitStop(context, data):
    openDeck  = history(VolBiasPeriods, "1d", "open_price").dropna(axis=1)
    valid     = [sid for sid in openDeck if sid in data]
    openDeck  = openDeck[valid]
    highDeck  = history(VolBiasPeriods, "1d", "high").dropna(axis=1)
    highDeck  = highDeck[valid]
    lowDeck   = history(VolBiasPeriods, "1d", "low").dropna(axis=1)
    lowDeck   = lowDeck[valid]
    closeDeck = history(VolBiasPeriods, "1d", "close_price").dropna(axis=1)
    closeDeck = closeDeck[valid]
    
    for stock in openDeck:
        if (not context.S[stock].NetQuantity or context.S[stock].HasOpenOrders):
            continue
        if ('VolBiasDelay' in context.S[stock]):
            context.S[stock].VolBiasDelay -= 1
            if (context.S[stock].VolBiasDelay > 0):
                continue
            del context.S[stock].VolBiasDelay
         
        context.S[stock].VolBias = None
        upPortion = 0; dnPortion = 0
        span = len(openDeck[stock])
        for i in range(0, span):
            if (closeDeck[stock][i] > openDeck[stock][i]):
                upPortion += (i + 1) * (highDeck[stock][i] - lowDeck[stock][i])
            else:
                dnPortion += (i + 1) * (highDeck[stock][i] - lowDeck[stock][i])
        factor = upPortion / (upPortion + dnPortion)
        context.S[stock].VolBias = factor
        if (factor >= VolBiasThreshold):
            context.S[stock].VolBiasDelay = VolBiasPeriods
            order_target_percent(stock, 0.0)  
            PrintExit(context.S[stock], "VolBiasProfitStop", stock.symbol)
            context.S[stock].VolBiasDelay = VolBiasPeriods
        
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def TrailingStop(context, data):
    for stock in context.S:
        if (not context.S[stock].NetQuantity or context.S[stock].HasOpenOrders):
            continue
        offset = (TrailingStopPct * context.S[stock].Close) / 100.0
        if ('TrailingStop' not in context.S[stock]):
            if (context.S[stock].NetQuantity > 0):
                context.S[stock].TrailingStop = context.S[stock].Low - offset
            else:
                context.S[stock].TrailingStop = context.S[stock].High + offset
            continue
        if (context.S[stock].NetQuantity > 0):
            if (context.S[stock].Close < context.S[stock].TrailingStop):  
                order_target_percent(stock, 0.0)  
                PrintExit(context.S[stock], "TrailSellStop", stock.symbol)
                del context.S[stock].TrailingStop
                continue
            else:  
                context.S[stock].TrailingStop = max(context.S[stock].TrailingStop, context.S[stock].Low - offset) 
        else:
            if (context.S[stock].Close > context.S[stock].TrailingStop):  
                order_target_percent(stock, 0.0)  
                PrintExit(context.S[stock], "TrailCoverStop", stock.symbol)
                del context.S[stock].TrailingStop
                continue
            else:  
                context.S[stock].TrailingStop = max(context.S[stock].TrailingStop, context.S[stock].High + offset) 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def VolatilityStop(context, data):
    closeDeck      = history(VariancePeriods, '1d', 'close_price').dropna(axis=1)
    closeDeck      = closeDeck[[sid for sid in closeDeck if sid in data]]
    returnsDeck    = closeDeck.pct_change()
    returnsLog     = numpy.log1p(returnsDeck)
    returnsLogMean = pandas.rolling_mean(returnsLog, 3) #magic #s
    sqrdLogDiffs   = (returnsLog - returnsLogMean)**2.0
    sqrdLogDiffs  *= 1000.0
    sqrdLogDiffs   = pandas.rolling_mean(sqrdLogDiffs, 7) #magic #s
    for stock in closeDeck:
        if (not context.S[stock].NetQuantity or context.S[stock].HasOpenOrders):
            continue
        if (not sqrdLogDiffs[stock].any() or len(sqrdLogDiffs[stock]) == 0):
            continue
        if (sqrdLogDiffs[stock][-1] > VarianceCutoff):
            order_target_percent(stock, 0.0)  
            PrintExit(context.S[stock], "VolatilityStop", stock.symbol)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def EstablishState(context, data):
    # Reconcile available stocks into context.S
    for stock in data:
        if (stock not in context.S):
            context.S[stock] = DataStock(stock, data[stock])
        else:
            context.S[stock].Update(data[stock])
            
    # Reconcile backwards for securities we can no longer trade
    removeThese = []
    for stock in context.S:
        if (stock not in data):
            removeThese.append(stock)
    for stock in removeThese:
        del context.S[stock]                    
        
	# Now setup up state on the SIDDAta object inside context.S        
    for stock in context.S:
        context.S[stock].Trigger       = 0
        context.S[stock].NetQuantity   = context.portfolio.positions[stock].amount
        context.S[stock].CostBasis     = context.portfolio.positions[stock].cost_basis
        context.S[stock].HasOpenOrders = False
        context.S[stock].OpenLimit     = None
        context.S[stock].OpenStop      = None
        if (not get_open_orders(stock)):
        	continue
        context.S[stock].HasOpenOrders = True
        for order in get_open_orders(stock):
            if order.limit:
                context.S[stock].OpenLimit   = order
                context.S[stock].LimitLeaves = order.amount - order.filled
            elif order.stop:
                context.S[stock].OpenStop    = order
                context.S[stock].StopLeaves  = order.amount - order.filled 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def PrintEntry(dataStock, entryName, symbol):
    if (not EnableLogging):
        return
    if (dataStock.NetQuantity == 0):
        print(">> {0:<20}{1:<5} @ {2:>7.2f}".format(
            entryName, symbol, dataStock.Close))
    #else:
    #    print("** {0:<20}{1:<5} @ {2:>7.2f} # {3:>5}".format(
    #        entryName, symbol, dataStock.Close, dataStock.NetQuantity))
   
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def PrintExit(dataStock, exitName, symbol):
    if (not EnableLogging):
        return    
    pnl = 0.0
    if (dataStock.NetQuantity > 0):
        pnl = dataStock.Close - dataStock.CostBasis
    else:
        pnl = dataStock.CostBasis - dataStock.Close
        
    print("<< {0:<20}{1:<5} @ {2:>7.2f} delta {3:>6.2f} qty {4:>5}".format(
            exitName, symbol, dataStock.Close, pnl, dataStock.NetQuantity))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def before_trading_start(context): 
    f = fundamentals
            
    # Standard fundamental filtering
    fundyDeck = get_fundamentals(
        query(
            f.valuation.market_cap,
            f.valuation_ratios.pe_ratio,
            f.asset_classification.morningstar_sector_code
        )
        .filter(f.valuation.market_cap >= 1e8)
        .filter(f.valuation.market_cap <= 9e9)
        .order_by(f.valuation_ratios.ps_ratio.asc())
        .limit(100)
    )
    update_universe(fundyDeck.columns.values)   
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class DataStock(zipline.protocol.SIDData):
    def __init__(this, sid, dataSid):
        this.Update(dataSid)

    def Update(this, dataSid):
        this.Open   = dataSid.open_price
        this.High   = dataSid.high
        this.Low    = dataSid.low
        this.Close  = dataSid.close_price
        this.Volume = dataSid.volume
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class MAType():
    SMA   = 0; EMA   = 1; WMA   = 2; DEMA  = 3; TEMA  = 4;    
    TRIMA = 5; KAMA  = 6; MAMA  = 7; T3    = 8
